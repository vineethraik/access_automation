#ifndef ARDUINO_H
#define ARDUINO_H
#include <Arduino.h>
#endif

const String indexHTML = F("<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n <meta charset=\"UTF-8\" />\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n <title>AccessOS Mobile</title>\n <style>\n body {\n font-family: Arial, sans-serif;\n margin: 0;\n padding: 0;\n background-color: #f4f4f4;\n color: #333;\n display: flex;\n justify-content: center;\n align-items: center;\n min-height: 100vh;\n }\n\n #app {\n background-color: #fff;\n padding: 20px;\n border-radius: 8px;\n box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n width: 100%;\n max-width: 400px;\n box-sizing: border-box;\n }\n\n h1,\n h2 {\n color: #0056b3;\n text-align: center;\n }\n\n button {\n background-color: #007bff;\n color: white;\n padding: 10px 15px;\n border: none;\n border-radius: 5px;\n cursor: pointer;\n font-size: 16px;\n width: 100%;\n margin-bottom: 10px;\n }\n\n button:hover {\n background-color: #0056b3;\n }\n\n input[type=\"text\"],\n input[type=\"password\"] {\n width: calc(100% - 20px);\n padding: 10px;\n margin-bottom: 10px;\n border: 1px solid #ddd;\n border-radius: 5px;\n box-sizing: border-box;\n }\n\n .page {\n display: none; /* Hidden by default, shown by JS */\n }\n\n .page.active {\n display: block;\n }\n\n .loading-animation {\n display: none;\n text-align: center;\n margin-top: 20px;\n }\n\n .loading-animation.active {\n display: block;\n }\n\n .spinner {\n border: 4px solid rgba(0, 0, 0, 0.1);\n border-left-color: #007bff;\n border-radius: 50%;\n width: 30px;\n height: 30px;\n animation: spin 1s linear infinite;\n margin: 0 auto 10px auto;\n }\n\n @keyframes spin {\n 0% {\n transform: rotate(0deg);\n }\n 100% {\n transform: rotate(360deg);\n }\n }\n\n .message {\n text-align: center;\n margin-top: 10px;\n font-weight: bold;\n }\n </style>\n </head>\n <body>\n <div id=\"app\">\n <div id=\"page1\" class=\"page\">\n <h2>Welcome to AccessOS</h2>\n <button onclick=\"showPage('page3')\" id=\"loginBtn\">Login</button>\n <button onclick=\"showPage('page2')\" id=\"registerBtn\">\n Register\n </button>\n </div>\n <div id=\"page2\" class=\"page\">\n <h2>Register New Fingerprint</h2>\n <input type=\"text\" id=\"usnInput\" placeholder=\"Enter USN\" />\n <input type=\"text\" id=\"nameInput\" placeholder=\"Enter Name\" />\n <button onclick=\"handleRegister()\" id=\"submitRegisterBtn\">\n Register Fingerprint\n </button>\n <div id=\"loadingAnimation\" class=\"loading-animation\">\n <div class=\"spinner\"></div>\n <p id=\"loadingMessage\">Waiting for fingerprint...</p>\n </div>\n <button onclick=\"showPage('page1')\" id=\"backToPage1Btn\">\n Back\n </button>\n </div>\n <div id=\"page3\" class=\"page\">\n <h2>Login</h2>\n <button onclick=\"handleLogin()\" id=\"loginFingerprintBtn\">\n Login with Fingerprint\n </button>\n <p id=\"loginStatus\" class=\"message\"></p>\n <div id=\"loggedInInfo\" style=\"display: none\">\n <p>\n USN:\n <span id=\"loggedInUSN\"></span>\n </p>\n <p>\n Name:\n <span id=\"loggedInName\"></span>\n </p>\n </div>\n <button onclick=\"showPage('page1')\" id=\"backToPage1Btn\">\n Back\n </button>\n </div>\n </div>\n\n <script>\n const app = document.getElementById(\"app\");\n let ws;\n let deviceId;\n\n // --- Constants and Enums ---\n const ENUM_MESSAGE_TYPES = {\n DEVICE_CONNECT: \"DEVICE_CONNECT\",\n REGISTER_FINGERPRINT: \"REGISTER_FINGERPRINT\",\n REGISTER_PROGRESS: \"REGISTER_PROGRESS\",\n LOGIN_FINGERPRINT: \"LOGIN_FINGERPRINT\",\n LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n LOGIN_FAILED: \"LOGIN_FAILED\",\n };\n\n const CONST_STRINGS = {\n DEVICE_ID_KEY: \"deviceId\",\n PAGE_ACTIVE_CLASS: \"active\",\n WS_PORT: 81,\n WS_NOT_CONNECTED: \"WebSocket is not connected.\",\n WS_CONNECTED: \"WebSocket connected.\",\n WS_DISCONNECTED:\n \"WebSocket disconnected. Attempting to reconnect in 5 seconds...\",\n WS_ERROR: \"WebSocket error:\",\n UNKNOWN_MESSAGE_TYPE: \"Unknown message type:\",\n REGISTER_COMPLETED: \"completed\",\n LOGIN_SUCCESSFUL: \"Login Successful!\",\n LOGIN_FAILED_MSG: \"Login Failed. Please try again.\",\n ENTER_USN_NAME_ALERT: \"Please enter both USN and Name.\",\n INITIATING_REGISTRATION: \"Initiating registration...\",\n ATTEMPTING_LOGIN: \"Attempting login...\",\n };\n\n // --- Utility Functions ---\n function generateDeviceId() {\n let id = localStorage.getItem(CONST_STRINGS.DEVICE_ID_KEY);\n if (!id) {\n id = \"device-\" + Math.random().toString(36).substr(2, 9);\n localStorage.setItem(CONST_STRINGS.DEVICE_ID_KEY, id);\n }\n return id;\n }\n\n function showPage(pageId) {\n console.log(pageId);\n document.querySelectorAll(\".page\").forEach((page) => {\n page.classList.remove(CONST_STRINGS.PAGE_ACTIVE_CLASS);\n });\n document\n .getElementById(pageId)\n .classList.add(CONST_STRINGS.PAGE_ACTIVE_CLASS);\n }\n\n function sendMessage(type, payload = {}) {\n if (ws && ws.readyState === WebSocket.OPEN) {\n const message = {\n deviceId: deviceId,\n type: type,\n payload: payload,\n };\n ws.send(JSON.stringify(message));\n } else {\n console.error(CONST_STRINGS.WS_NOT_CONNECTED);\n // Optionally, try to reconnect or queue messages\n }\n }\n\n // --- WebSocket Initialization ---\n function initWebSocket() {\n const host = window.location.hostname;\n const port = CONST_STRINGS.WS_PORT; // WebSocket port\n ws = new WebSocket(`ws://${host}:${port}`);\n\n ws.onopen = () => {\n console.log(CONST_STRINGS.WS_CONNECTED);\n // Send initial device ID or status\n sendMessage(ENUM_MESSAGE_TYPES.DEVICE_CONNECT);\n };\n\n ws.onmessage = (event) => {\n const message = JSON.parse(event.data);\n console.log(\"Message from server:\", message);\n handleWebSocketMessage(message);\n };\n\n ws.onclose = () => {\n console.log(CONST_STRINGS.WS_DISCONNECTED);\n setTimeout(initWebSocket, 5000);\n };\n\n ws.onerror = (error) => {\n console.error(CONST_STRINGS.WS_ERROR, error);\n ws.close();\n };\n }\n\n function handleWebSocketMessage(message) {\n switch (message.type) {\n case ENUM_MESSAGE_TYPES.REGISTER_PROGRESS:\n updateLoadingMessage(message.payload.status);\n if (message.payload.status === CONST_STRINGS.REGISTER_COMPLETED) {\n setTimeout(() => showPage(\"page3\"), 1000); // Go to login page after registration\n }\n break;\n case ENUM_MESSAGE_TYPES.LOGIN_SUCCESS:\n document.getElementById(\"loggedInUSN\").textContent =\n message.payload.usn;\n document.getElementById(\"loggedInName\").textContent =\n message.payload.name;\n document.getElementById(\"loginStatus\").textContent =\n CONST_STRINGS.LOGIN_SUCCESSFUL;\n break;\n case ENUM_MESSAGE_TYPES.LOGIN_FAILED:\n document.getElementById(\"loginStatus\").textContent =\n CONST_STRINGS.LOGIN_FAILED_MSG;\n break;\n default:\n console.log(CONST_STRINGS.UNKNOWN_MESSAGE_TYPE, message.type);\n }\n }\n\n // --- Page Rendering Functions ---\n function renderPage1() {\n app.innerHTML = `\n <div id=\"page1\" class=\"page ${CONST_STRINGS.PAGE_ACTIVE_CLASS}\">\n <h2>Welcome to AccessOS</h2>\n <button id=\"loginBtn\">Login</button>\n <button id=\"registerBtn\">Register</button>\n </div>\n `;\n document\n .getElementById(\"loginBtn\")\n .addEventListener(\"click\", () => showPage(\"page3\"));\n document\n .getElementById(\"registerBtn\")\n .addEventListener(\"click\", () => showPage(\"page2\"));\n }\n\n function renderPage2() {\n app.innerHTML = `\n <div id=\"page2\" class=\"page ${CONST_STRINGS.PAGE_ACTIVE_CLASS}\">\n <h2>Register New Fingerprint</h2>\n <input type=\"text\" id=\"usnInput\" placeholder=\"Enter USN\">\n <input type=\"text\" id=\"nameInput\" placeholder=\"Enter Name\">\n <button id=\"submitRegisterBtn\">Register Fingerprint</button>\n <div id=\"loadingAnimation\" class=\"loading-animation\">\n <div class=\"spinner\"></div>\n <p id=\"loadingMessage\">Waiting for fingerprint...</p>\n </div>\n <button id=\"backToPage1Btn\">Back</button>\n </div>\n `;\n document\n .getElementById(\"submitRegisterBtn\")\n .addEventListener(\"click\", handleRegister);\n document\n .getElementById(\"backToPage1Btn\")\n .addEventListener(\"click\", () => showPage(\"page1\"));\n }\n\n function renderPage3() {\n app.innerHTML = `\n <div id=\"page3\" class=\"page ${CONST_STRINGS.PAGE_ACTIVE_CLASS}\">\n <h2>Login</h2>\n <button id=\"loginFingerprintBtn\">Login with Fingerprint</button>\n <p id=\"loginStatus\" class=\"message\"></p>\n <div id=\"loggedInInfo\" style=\"display:none;\">\n <p>USN: <span id=\"loggedInUSN\"></span></p>\n <p>Name: <span id=\"loggedInName\"></span></p>\n </div>\n <button id=\"backToPage1Btn\">Back</button>\n </div>\n `;\n document\n .getElementById(\"loginFingerprintBtn\")\n .addEventListener(\"click\", handleLogin);\n document\n .getElementById(\"backToPage1Btn\")\n .addEventListener(\"click\", () => showPage(\"page1\"));\n }\n\n // --- Event Handlers ---\n function handleRegister() {\n let usn = document.getElementById(\"usnInput\").value;\n const name = document.getElementById(\"nameInput\").value;\n\n if (!usn || !name) {\n alert(CONST_STRINGS.ENTER_USN_NAME_ALERT);\n return;\n }\n\n // Convert USN to uppercase\n usn = usn.toUpperCase();\n\n // Regex for name: at least 5, max 25 characters, only letters\n const nameRegex = /^[a-zA-Z]{5,25}$/;\n if (!nameRegex.test(name)) {\n alert(\"Name must be 5-25 characters long and contain only letters.\");\n return;\n }\n\n // Regex for USN: 4SF<year><branch><number>\n const usnRegex = /^4SF\\d{2}[A-Z]{2}\\d{3}$/;\n if (!usnRegex.test(usn)) {\n alert(\"USN must be in the format 4SFYYBB### (e.g., 4SF18EC124).\");\n return;\n }\n\n document\n .getElementById(\"loadingAnimation\")\n .classList.add(CONST_STRINGS.PAGE_ACTIVE_CLASS);\n updateLoadingMessage(CONST_STRINGS.INITIATING_REGISTRATION);\n sendMessage(ENUM_MESSAGE_TYPES.REGISTER_FINGERPRINT, {\n usn: usn,\n name: name,\n });\n }\n\n function updateLoadingMessage(message) {\n document.getElementById(\"loadingMessage\").textContent = message;\n }\n\n function handleLogin() {\n document.getElementById(\"loginStatus\").textContent =\n CONST_STRINGS.ATTEMPTING_LOGIN;\n document.getElementById(\"loggedInInfo\").style.display = \"none\";\n sendMessage(ENUM_MESSAGE_TYPES.LOGIN_FINGERPRINT);\n }\n\n // --- Initial Setup ---\n document.addEventListener(\"DOMContentLoaded\", () => {\n deviceId = generateDeviceId();\n console.log(\"Device ID:\", deviceId);\n initWebSocket();\n showPage(\"page1\");\n // window.showPage =showPage;\n // renderPage1(); // Start with Page 1\n });\n </script>\n </body>\n</html>\n");
