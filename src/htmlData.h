#ifndef ARDUINO_H
#define ARDUINO_H
#include <Arduino.h>
#endif

const String indexHTML = F("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>AccessOS Mobile</title>\n <style>\nbody {\n font-family: Arial, sans-serif;\n margin: 0;\n padding: 0;\n background-color: #f4f4f4;\n color: #333;\n display: flex;\n justify-content: center;\n align-items: center;\n min-height: 100vh;\n}\n\n#app {\n background-color: #fff;\n padding: 20px;\n border-radius: 8px;\n box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n width: 100%;\n max-width: 400px;\n box-sizing: border-box;\n}\n\nh1, h2 {\n color: #0056b3;\n text-align: center;\n}\n\nbutton {\n background-color: #007bff;\n color: white;\n padding: 10px 15px;\n border: none;\n border-radius: 5px;\n cursor: pointer;\n font-size: 16px;\n width: 100%;\n margin-bottom: 10px;\n}\n\nbutton:hover {\n background-color: #0056b3;\n}\n\ninput[type=\"text\"], input[type=\"password\"] {\n width: calc(100% - 20px);\n padding: 10px;\n margin-bottom: 10px;\n border: 1px solid #ddd;\n border-radius: 5px;\n box-sizing: border-box;\n}\n\n.page {\n display: none; /* Hidden by default, shown by JS */\n}\n\n.page.active {\n display: block;\n}\n\n.loading-animation {\n display: none;\n text-align: center;\n margin-top: 20px;\n}\n\n.loading-animation.active {\n display: block;\n}\n\n.spinner {\n border: 4px solid rgba(0, 0, 0, 0.1);\n border-left-color: #007bff;\n border-radius: 50%;\n width: 30px;\n height: 30px;\n animation: spin 1s linear infinite;\n margin: 0 auto 10px auto;\n}\n\n@keyframes spin {\n 0% { transform: rotate(0deg); }\n 100% { transform: rotate(360deg); }\n}\n\n.message {\n text-align: center;\n margin-top: 10px;\n font-weight: bold;\n}\n </style>\n</head>\n<body>\n <div id=\"app\">\n <!-- Pages will be dynamically loaded here by JavaScript -->\n </div>\n\n <script>\nconst app = document.getElementById('app');\nlet ws;\nlet deviceId;\n\n// --- Constants and Enums ---\nconst ENUM_MESSAGE_TYPES = {\n DEVICE_CONNECT: \"DEVICE_CONNECT\",\n REGISTER_FINGERPRINT: \"REGISTER_FINGERPRINT\",\n REGISTER_PROGRESS: \"REGISTER_PROGRESS\",\n LOGIN_FINGERPRINT: \"LOGIN_FINGERPRINT\",\n LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n LOGIN_FAILED: \"LOGIN_FAILED\"\n};\n\nconst CONST_STRINGS = {\n DEVICE_ID_KEY: 'deviceId',\n PAGE_ACTIVE_CLASS: 'active',\n WS_PORT: 81,\n WS_NOT_CONNECTED: \"WebSocket is not connected.\",\n WS_CONNECTED: \"WebSocket connected.\",\n WS_DISCONNECTED: \"WebSocket disconnected. Attempting to reconnect in 5 seconds...\",\n WS_ERROR: \"WebSocket error:\",\n UNKNOWN_MESSAGE_TYPE: \"Unknown message type:\",\n REGISTER_COMPLETED: \"completed\",\n LOGIN_SUCCESSFUL: \"Login Successful!\",\n LOGIN_FAILED_MSG: \"Login Failed. Please try again.\",\n ENTER_USN_NAME_ALERT: \"Please enter both USN and Name.\",\n INITIATING_REGISTRATION: \"Initiating registration...\",\n ATTEMPTING_LOGIN: \"Attempting login...\"\n};\n\n// --- Utility Functions ---\nfunction generateDeviceId() {\n let id = localStorage.getItem(CONST_STRINGS.DEVICE_ID_KEY);\n if (!id) {\n id = 'device-' + Math.random().toString(36).substr(2, 9);\n localStorage.setItem(CONST_STRINGS.DEVICE_ID_KEY, id);\n }\n return id;\n}\n\nfunction showPage(pageId) {\n document.querySelectorAll('.page').forEach(page => {\n page.classList.remove(CONST_STRINGS.PAGE_ACTIVE_CLASS);\n });\n document.getElementById(pageId).classList.add(CONST_STRINGS.PAGE_ACTIVE_CLASS);\n}\n\nfunction sendMessage(type, payload = {}) {\n if (ws && ws.readyState === WebSocket.OPEN) {\n const message = {\n deviceId: deviceId,\n type: type,\n payload: payload\n };\n ws.send(JSON.stringify(message));\n } else {\n console.error(CONST_STRINGS.WS_NOT_CONNECTED);\n // Optionally, try to reconnect or queue messages\n }\n}\n\n// --- WebSocket Initialization ---\nfunction initWebSocket() {\n const host = window.location.hostname;\n const port = CONST_STRINGS.WS_PORT; // WebSocket port\n ws = new WebSocket(`ws://${host}:${port}`);\n\n ws.onopen = () => {\n console.log(CONST_STRINGS.WS_CONNECTED);\n // Send initial device ID or status\n sendMessage(ENUM_MESSAGE_TYPES.DEVICE_CONNECT);\n };\n\n ws.onmessage = (event) => {\n const message = JSON.parse(event.data);\n console.log(\"Message from server:\", message);\n handleWebSocketMessage(message);\n };\n\n ws.onclose = () => {\n console.log(CONST_STRINGS.WS_DISCONNECTED);\n setTimeout(initWebSocket, 5000);\n };\n\n ws.onerror = (error) => {\n console.error(CONST_STRINGS.WS_ERROR, error);\n ws.close();\n };\n}\n\nfunction handleWebSocketMessage(message) {\n switch (message.type) {\n case ENUM_MESSAGE_TYPES.REGISTER_PROGRESS:\n updateLoadingMessage(message.payload.status);\n if (message.payload.status === CONST_STRINGS.REGISTER_COMPLETED) {\n setTimeout(() => showPage('page3'), 1000); // Go to login page after registration\n }\n break;\n case ENUM_MESSAGE_TYPES.LOGIN_SUCCESS:\n document.getElementById('loggedInUSN').textContent = message.payload.usn;\n document.getElementById('loggedInName').textContent = message.payload.name;\n document.getElementById('loginStatus').textContent = CONST_STRINGS.LOGIN_SUCCESSFUL;\n break;\n case ENUM_MESSAGE_TYPES.LOGIN_FAILED:\n document.getElementById('loginStatus').textContent = CONST_STRINGS.LOGIN_FAILED_MSG;\n break;\n default:\n console.log(CONST_STRINGS.UNKNOWN_MESSAGE_TYPE, message.type);\n }\n}\n\n// --- Page Rendering Functions ---\nfunction renderPage1() {\n app.innerHTML = `\n <div id=\"page1\" class=\"page ${CONST_STRINGS.PAGE_ACTIVE_CLASS}\">\n <h2>Welcome to AccessOS</h2>\n <button id=\"loginBtn\">Login</button>\n <button id=\"registerBtn\">Register</button>\n </div>\n `;\n document.getElementById('loginBtn').addEventListener('click', () => showPage('page3'));\n document.getElementById('registerBtn').addEventListener('click', () => showPage('page2'));\n}\n\nfunction renderPage2() {\n app.innerHTML = `\n <div id=\"page2\" class=\"page ${CONST_STRINGS.PAGE_ACTIVE_CLASS}\">\n <h2>Register New Fingerprint</h2>\n <input type=\"text\" id=\"usnInput\" placeholder=\"Enter USN\">\n <input type=\"text\" id=\"nameInput\" placeholder=\"Enter Name\">\n <button id=\"submitRegisterBtn\">Register Fingerprint</button>\n <div id=\"loadingAnimation\" class=\"loading-animation\">\n <div class=\"spinner\"></div>\n <p id=\"loadingMessage\">Waiting for fingerprint...</p>\n </div>\n <button id=\"backToPage1Btn\">Back</button>\n </div>\n `;\n document.getElementById('submitRegisterBtn').addEventListener('click', handleRegister);\n document.getElementById('backToPage1Btn').addEventListener('click', () => showPage('page1'));\n}\n\nfunction renderPage3() {\n app.innerHTML = `\n <div id=\"page3\" class=\"page ${CONST_STRINGS.PAGE_ACTIVE_CLASS}\">\n <h2>Login</h2>\n <button id=\"loginFingerprintBtn\">Login with Fingerprint</button>\n <p id=\"loginStatus\" class=\"message\"></p>\n <div id=\"loggedInInfo\" style=\"display:none;\">\n <p>USN: <span id=\"loggedInUSN\"></span></p>\n <p>Name: <span id=\"loggedInName\"></span></p>\n </div>\n <button id=\"backToPage1Btn\">Back</button>\n </div>\n `;\n document.getElementById('loginFingerprintBtn').addEventListener('click', handleLogin);\n document.getElementById('backToPage1Btn').addEventListener('click', () => showPage('page1'));\n}\n\n// --- Event Handlers ---\nfunction handleRegister() {\n const usn = document.getElementById('usnInput').value;\n const name = document.getElementById('nameInput').value;\n\n if (!usn || !name) {\n alert(CONST_STRINGS.ENTER_USN_NAME_ALERT);\n return;\n }\n\n document.getElementById('loadingAnimation').classList.add(CONST_STRINGS.PAGE_ACTIVE_CLASS);\n updateLoadingMessage(CONST_STRINGS.INITIATING_REGISTRATION);\n sendMessage(ENUM_MESSAGE_TYPES.REGISTER_FINGERPRINT, { usn: usn, name: name });\n}\n\nfunction updateLoadingMessage(message) {\n document.getElementById('loadingMessage').textContent = message;\n}\n\nfunction handleLogin() {\n document.getElementById('loginStatus').textContent = CONST_STRINGS.ATTEMPTING_LOGIN;\n document.getElementById('loggedInInfo').style.display = 'none';\n sendMessage(ENUM_MESSAGE_TYPES.LOGIN_FINGERPRINT);\n}\n\n// --- Initial Setup ---\ndocument.addEventListener('DOMContentLoaded', () => {\n deviceId = generateDeviceId();\n console.log(\"Device ID:\", deviceId);\n initWebSocket();\n renderPage1(); // Start with Page 1\n});\n </script>\n</body>\n</html>\n");
